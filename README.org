* Advent of Code 2020

Run all solutions with =make=:
#+BEGIN_SRC bash
$ make
runhaskell day1.hs < day1.input
Part one: [658899]
Part two: [155806250]
[...]
#+END_SRC

** Commentary
*** Day 1
I'd like to get some practice using parser combinators, more
specifically with the built in implementation
=Text.ParserCombinators.ReadP=. That's why I also use it for very
simple input, like this day's list of numbers.

I have an utility function which attempts to parse the full input.
#+BEGIN_SRC haskell
readNumbers :: String -> [Int]
readNumbers s = case [x | (x, "") <- readP_to_S numbers s] of
  [x] -> x
  _   -> []
#+END_SRC
For simplicity, it just returns the empty list if there's any
unexpected input. But we shouldn't get any run-time errors.

The challenging part of this day's problem is how to generate all
possible pairs and triplets of numbers. This can probably be easily
achieved with a library, with the benefit of good performance.

But here, for the challenge of it, I solved it using recursion and
normal Haskell lists. I think it is alright, but there is probably an
even more expressive way to do it. Also, the use of concatenation must
be terrible for performance, but I've decided to ignore that and try
to focus more on the readability.
#+BEGIN_SRC haskell
pairs :: [a] -> [(a, a)]
pairs []     = []
pairs (_:[]) = []
pairs (x:xs) = map ((,)x) xs ++ pairs xs

triplets :: [a] -> [(a, a, a)]
triplets []       = []
triplets (_:[])   = []
triplets (_:_:[]) = []
triplets (x:xs)   = map (\(a, b) -> (x, a, b)) (pairs xs) ++ triplets xs
#+END_SRC

*** Day 2
It was more fun to write the parser for this day's input format since
it had a bit of structure. I generalized the =readNumbers= function
from yesterday so that I could use the same approach
#+BEGIN_SRC haskell
parseWith :: Monoid a => ReadP a -> String -> a
parseWith p s = case [x | (x, "") <- readP_to_S p s] of
  [x] -> x
  _   -> mempty
#+END_SRC
and then I wrote some small, nice parsing functions. For example:
#+BEGIN_SRC haskell
policy :: ReadP Policy
policy = do
  m <- nat
  _ <- char '-'
  n <- nat
  _ <- char ' '
  c <- get
  return (Policy m n c)
#+END_SRC

I realize I don't actually focus on readability. I'm trying to make
short, expressive functions, which makes readability suffer. See this
function for instance:
#+BEGIN_SRC haskell
check' :: Policy -> Password -> Bool
check' (Policy m n c) password = fromMaybe False $ pure (/=) <*> at m <*> at n
  where at = fmap (== c) . safeGet password
#+END_SRC
But I like it. It's fun to tweak and refine. This way I get practice,
and in the future I'll hopefully learn how to strike the balance
between readability and expressiveness.

*** Day 3
More parsing fun! This time a two-dimensional map, which was pretty
cool as the result was an infinite structure. This is the parser in
its entirety:
#+BEGIN_SRC haskell
pmap :: ReadP Map
pmap = endBy row (char '\n')

row :: ReadP [Int]
row = cycle <$> many (open +++ tree)
  where open = const 0 <$> char '.'
        tree = const 1 <$> char '#'
#+END_SRC
(=pmap= is named so in order to not conflict with the built in =map=
function). Since the map extends infinitely to the right, we can use
the power of Haskell's lazy lists and just =fmap= a =cycle= onto the
parsed row. Combining this infinite row in =pmap= was no problem at
all! I used =<$>= instead of =fmap= for variation, and it let me get
rid of some parentheses.

I realize I would have saved a lot more space if I didn't use =cycle=
and instead use modular arithmetic. But still, I enjoyed this variant.
